name: GUI - Build and Release
on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10
  MACOSX_DEPLOYMENT_TARGET: 10.7
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  MECHANIX_APTLY_SERVER_ENDPOINT: ${{ vars.MECHANIX_APTLY_SERVER_ENDPOINT }}
  MECHANIX_APTLY_DEB_REPOSITORY_DISTRO: ${{ vars.MECHANIX_APTLY_DEB_REPOSITORY_DISTRO }}
  MECHANIX_APTLY_DEB_REPOSITORY_NAME: ${{ vars.MECHANIX_APTLY_DEB_REPOSITORY_NAME }}
  MECHANIX_APTLY_S3_PUBLISH_ENDPOINT: ${{ vars.MECHANIX_APTLY_S3_PUBLISH_ENDPOINT }}

jobs:
  release_please:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release.outputs['apps--tag_name'] }}
      release_created: ${{ steps.release.outputs.releases_created }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: mechanix-gui-release-config.json
          manifest-file: .mechanix-gui-release-manifest.json
          target-branch: ${{ github.ref_name }}
      
      - name: Print release outputs for debugging
        continue-on-error: true
        env:
          RELEASE_OUTPUTS: ${{ toJson(steps.release.outputs) }} 
        run: |
          echo "Release outputs: $RELEASE_OUTPUTS"
          echo "release created: $release_created"
  
  build:
    environment: dev
    name: ${{ matrix.name }}
    needs: release_please
    if: ${{ needs.release_please.outputs.release_created == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Settings (arm64)
            package: mechanix-settings
            artifact: mechanix-settings-linux-arm64.tar.gz
            path: apps
            runs_on: ubicloud-standard-2-arm
            arch: arm64

          - name: Settings (amd64)
            package: mechanix-settings
            artifact: mechanix-settings-linux-amd64.tar.gz
            path: apps
            runs_on: ubuntu-22.04
            arch: amd64

          - name: Camera (arm64)
            package: mechanix-camera
            artifact: mechanix-camera-linux-arm64.tar.gz
            path: apps
            runs_on: ubicloud-standard-2-arm
            arch: arm64

          - name: Camera (amd64)
            package: mechanix-camera
            artifact: mechanix-camera-linux-amd64.tar.gz
            path: apps
            runs_on: ubuntu-22.04
            arch: amd64
      
          - name: Files (arm64)
            package: mechanix-files
            artifact: mechanix-files-linux-arm64.tar.gz
            path: apps
            runs_on: ubicloud-standard-2-arm
            arch: arm64
          
          - name: Files (amd64)
            package: mechanix-files
            artifact: mechanix-files-linux-amd64.tar.gz
            path: apps
            runs_on: ubuntu-22.04
            arch: amd64

          - name: system dbus service (arm64)
            package: mechanix_system_dbus_server
            artifact: mechanix_system_dbus_server-linux-arm64.tar.gz
            path: services
            runs_on: ubicloud-standard-2-arm
            arch: arm64

          - name: system dbus service (amd64)
            package: mechanix_system_dbus_server
            artifact: mechanix_system_dbus_server-linux-amd64.tar.gz
            path: services
            runs_on: ubuntu-22.04
            arch: amd64

          - name: desktop dbus service (arm64)
            package: mechanix_desktop_dbus_server
            artifact: mechanix_desktop_dbus_server-linux-arm64.tar.gz
            path: services
            runs_on: ubicloud-standard-2-arm
            arch: arm64

          - name: desktop dbus service (amd64)
            package: mechanix_desktop_dbus_server
            artifact: mechanix_desktop_dbus_server-linux-amd64.tar.gz
            path: services
            runs_on: ubuntu-22.04
            arch: amd64

          - name: store server (arm64)
            package: mechanix_store_server
            artifact: mechanix_store_server-linux-arm64.tar.gz
            path: services
            runs_on: ubicloud-standard-2-arm
            arch: arm64

          - name: store server (amd64)
            package: mechanix_store_server
            artifact: mechanix_store_server-linux-amd64.tar.gz
            path: services
            runs_on: ubuntu-22.04
            arch: amd64

          - name: Laucher (arm64)
            package: mechanix-launcher
            artifact: mechanix-launcher-linux-arm64.tar.gz
            path: shell
            runs_on: ubicloud-standard-2-arm
            arch: arm64

          - name: Laucher (amd64)
            package: mechanix-launcher
            artifact: mechanix-launcher-linux-amd64.tar.gz
            path: shell
            runs_on: ubuntu-22.04
            arch: amd64
    
          - name: Keyboard (arm64)
            package: mechanix-keyboard
            artifact: mechanix-keyboard-linux-arm64.tar.gz
            path: shell
            runs_on: ubicloud-standard-2-arm
            arch: arm64

          - name: Keyboard (amd64)
            package: mechanix-keyboard
            artifact: mechanix-keyboard-linux-amd64.tar.gz
            path: shell
            runs_on: ubuntu-22.04
            arch: amd64

    runs-on: ${{ matrix.runs_on }}
    continue-on-error: false
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Install Rust 1.83.0
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          rustup default 1.83.0

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Update apt
        run: sudo apt update

      - name: Install dependencies
        run: |
          sudo apt install \
          libwayland-dev \
          libxkbcommon-dev \
          libdbus-1-dev \
          libpam0g-dev \
          libclang-dev \
          protobuf-compiler \
          libpulse-dev \
          libunwind-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly \
          gstreamer1.0-libav \
          gstreamer1.0-tools \
          gstreamer1.0-x \
          gstreamer1.0-alsa \
          gstreamer1.0-gl \
          gstreamer1.0-gtk3 \
          gstreamer1.0-qt5 \
          gstreamer1.0-pulseaudio

      - name: Set up Git SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_GIT }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Build [${{ matrix.package }}]
        run: |
          cd ${{ matrix.path }}
          cargo --config net.git-fetch-with-cli=true fetch
          cargo build --release --package ${{ matrix.package }}
          ls -la

      - name: Package deb [${{ matrix.package }}]
        run: |
          cd ${{ matrix.path }}
          cargo deb --no-build --package ${{ matrix.package }}
          ls -la

      - name: Extract package details
        id: package_details
        run: |
          cd ${{ matrix.path }}
          PACKAGE_NAME=$(ls target/debian/*.deb | xargs basename)
          FOLDER_NAME=$(echo $PACKAGE_NAME | sed -r 's/_[0-9]+\.[0-9]+\.[0-9]+-[0-9]+.*$//')
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "folder_name=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "Package Name: $PACKAGE_NAME"
          echo "Folder Name: $FOLDER_NAME"

      - name: Upload package to Aptly
        run: |
          cd ${{ matrix.path }}
          echo "Uploading package: ${{ steps.package_details.outputs.package_name }}"
          echo "To folder: ${{ steps.package_details.outputs.folder_name }}"
          curl -X POST -F file=@target/debian/${{ steps.package_details.outputs.package_name }} ${{ env.MECHANIX_APTLY_SERVER_ENDPOINT }}/api/files/${{ steps.package_details.outputs.folder_name }}
      
      - name: Add package to local repo
        run: |
          echo "Adding package from folder: ${{ steps.package_details.outputs.folder_name }}"
          curl -X POST ${{ env.MECHANIX_APTLY_SERVER_ENDPOINT }}/api/repos/${{ env.MECHANIX_APTLY_DEB_REPOSITORY_NAME }}/file/${{ steps.package_details.outputs.folder_name }}
      
      - name: Update local published repo
        run: |
          echo "Updating local published repo for MECHANIX_APTLY_DEB_REPOSITORY_DISTRO: ${{ env.MECHANIX_APTLY_DEB_REPOSITORY_DISTRO }}"
          curl -X PUT -H 'Content-Type: application/json' --data '{
            "Architectures": ["arm64", "amd64"],
            "Signing": {"Skip": true}
          }' ${{ env.MECHANIX_APTLY_SERVER_ENDPOINT }}/api/publish/:./${{ env.MECHANIX_APTLY_DEB_REPOSITORY_DISTRO }}
      
      - name: Update S3 published repo
        run: |
          echo "Updating S3 published repo for MECHANIX_APTLY_DEB_REPOSITORY_DISTRO: ${{ env.MECHANIX_APTLY_DEB_REPOSITORY_DISTRO }}"
          curl -X PUT -H 'Content-Type: application/json' --data '{
            "Sources": [{"Name": "${{ env.MECHANIX_APTLY_DEB_REPOSITORY_NAME }}"}],
            "Architectures": ["arm64", "amd64"],
            "Signing": {"Skip": true}
          }' ${{ env.MECHANIX_APTLY_SERVER_ENDPOINT }}/api/publish/s3:${{env.MECHANIX_APTLY_S3_PUBLISH_ENDPOINT}}:/${{ env.MECHANIX_APTLY_DEB_REPOSITORY_DISTRO }}    
      

      - name: Prepare artifacts [${{ matrix.package }}]
        run: |
          mkdir build
          cp ${{ matrix.path }}/target/release/${{ matrix.package }} ./build
          cp ${{ matrix.path }}/target/debian/*.deb ./build
          tar -czvf ${{ matrix.artifact }} ./build

      - name: Build | Add Artifacts to Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.artifact }}  # No need for ./build/ here
          tag_name: ${{ needs.release_please.outputs.tag_name }}